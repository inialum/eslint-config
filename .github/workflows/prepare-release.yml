name: Prepare for release
on:
  workflow_dispatch:
    inputs:
      versioning:
        description: 'Versioning'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Run test
        run: pnpm test:ci

  prepare-release:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 3
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'

      - name: Configure git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://github-actions:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update patch version
        if: contains(github.event.inputs.versioning, 'patch')
        run: pnpm version patch

      - name: Update minor version
        if: contains(github.event.inputs.versioning, 'minor')
        run: pnpm version minor

      - name: Update major version
        if: contains(github.event.inputs.versioning, 'major')
        run: pnpm version major

      - name: Push changes
        run: git push --follow-tags origin HEAD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get updated version
        id: get_version
        run: echo "value=$(pnpm pkg get version)" >> $GITHUB_OUTPUT

      - name: Create release note
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            await github.request(`POST /repos/${{ github.repository }}/releases`, {
              tag_name: "${{ 'v' }}${{ steps.get_version.outputs.value }}",
              draft: true,
              generate_release_notes: true
            });
